function [PlantFeedthrough, ...
            LogPlantDynamics, ...    
            PlantStatesDerivatives] ...
            = plantDynamics(PlantFeedthrough, ...
                                LogPlantDynamics, ...
                                PlantStatesDerivatives, ...
                                EnvironmentConditions, ...
                                ActuatorsOutputs, ...
                                PlantStates, ...
                                ParametersPlant)

%% Abbreviations

% States
attitude_quaternion_BI = PlantStates.RigidBody.attitude_quaternion_BI;
angular_velocity_BI_B__rad_per_s = PlantStates.RigidBody.angular_velocity_BI_B__rad_per_s;

% Environment Conditions
atmosphere_mass_density__kg_per_m3 = EnvironmentConditions.EarthAtmosphere.mass_density__kg_per_m3;
atmosphere_number_density__1_per_m3 = EnvironmentConditions.EarthAtmosphere.number_density__1_per_m3;
atmosphere_temperature__K = EnvironmentConditions.EarthAtmosphere.temperature__K;

%% Forces and Torques

% Aerodynamics
[aerodynamic_force_B__N, aerodynamic_torque_B__Nm] ...
    = SimplifiedVleoAerodynamics.execute(attitude_quaternion_BI, ...
                                            angular_velocity_BI_B__rad_per_s, ...
                                            [0;7.7e3;0], ...
                                            zeros(3,1), ...
                                            atmosphere_mass_density__kg_per_m3, ...
                                            atmosphere_number_density__1_per_m3, ...
                                            atmosphere_temperature__K, ...
                                            zeros(5,1), ...
                                            ParametersPlant.SimplifiedVleoAerodynamics);
aerodynamic_force_I__N = smu.unitQuat.att.transformVector(smu.unitQuat.invert(attitude_quaternion_BI), aerodynamic_force_B__N);

%% Sum forces and torques
net_torque_B__N_m = aerodynamic_torque_B__Nm;

%% Mechanics
% Rigid Body
[~, ...
    ~, ...
    attitude_quaternion_derivative__1_per_s, ...
    angular_velocity_derivative_BI_B__rad_per_s2] ...
    = RigidBodyMechanics.execute([0;0;0], ...
                                    net_torque_B__N_m, ...
                                    [0;0;0], ...
                                    attitude_quaternion_BI, ...
                                    angular_velocity_BI_B__rad_per_s, ...
                                    ParametersPlant.RigidBodyMechanics);

%% Feedthrough Output

%% States Derivatives
PlantStatesDerivatives.RigidBody.attitude_quaternion_BI = attitude_quaternion_derivative__1_per_s;
PlantStatesDerivatives.RigidBody.angular_velocity_BI_B__rad_per_s = angular_velocity_derivative_BI_B__rad_per_s2;

%% Log relevant data
LogPlantDynamics.PlantStatesDerivatives = PlantStatesDerivatives;
LogPlantDynamics.PlantStates = PlantStates;
LogPlantDynamics.Forces.aerodynamic_force_B__N = aerodynamic_force_B__N;
LogPlantDynamics.Torques.aerodynamic_torque_B__Nm = aerodynamic_torque_B__Nm;

end
